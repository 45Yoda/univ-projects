#BlueJ class context
comment0.params=
comment0.target=Playlist()
comment0.text=\r\n\ Construtor\ vazio.\ Inicializa\ a\ playlist\ vazia.\r\n
comment1.params=faixas
comment1.target=Playlist(java.util.ArrayList)
comment1.text=\r\n\ Construtor\ por\ parametro.\ Cria\ uma\ playlist,\ dando\ uma\ lista\ \r\n\ de\ faixas.\r\n
comment10.params=m
comment10.target=void\ removeFaixa(Faixa)
comment10.text=\r\n\ Remover\ uma\ faixa\ da\ playlist\r\n\ \r\n\ Vers\u00E3o\ incorrecta,\ por\ desconhecimento\ da\ API\ de\ ArrayList.\r\n\ \r\n\ public\ void\ removeFaixaErrado(Faixa\ m)\ {\r\n\ \ \ \ \ if(faixas.contains(m))\ {\r\n\ \ \ \ \ \ \ \ \ int\ index\ \=\ 0;\r\n\ \ \ \ \ \ \ \ \ Iterator<Faixa>\ it\ \=\ faixas.iterator();\r\n\ \ \ \ \ \ \ \ \ while(it.hasNext()\ &&\ \!it.next().equals(m))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ index++;\r\n\ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ faixas.remove(index);\r\n\ \ \ \ \ \ }\ \ \ \r\n\ \ }\r\n
comment11.params=faixas
comment11.target=void\ adicionar(java.util.List)
comment11.text=\r\n\ Adicionar\ um\ conjunto\ de\ faixas\ \u00E0\ playlist\r\n
comment12.params=faixas
comment12.target=void\ adicionarF(java.util.List)
comment13.params=f
comment13.target=int\ classificacaoSuperior(Faixa)
comment14.params=f
comment14.target=int\ classificacaoSuperiorF(Faixa)
comment15.params=d
comment15.target=boolean\ duracaoSuperior(double)
comment16.params=d
comment16.target=boolean\ duracaoSuperiorF(double)
comment17.params=n
comment17.target=java.util.List\ getCopiaFaixas(int)
comment18.params=n
comment18.target=java.util.List\ getCopiaFaixasF(int)
comment19.params=
comment19.target=double\ duracaoTotal()
comment2.params=faixas
comment2.target=Playlist(ExemploPlaylist.Playlist)
comment2.text=\r\n\ Construtor\ por\ c\u00F3pia.\ Cria\ uma\ playlist,\ a\ partir\ de\ outra\ \r\n\ inst\u00E2ncia\ de\ playlist.\r\n
comment20.params=
comment20.target=double\ duracaoTotalF()
comment20.text=\r\n\ mapToDouble\ devolve\ uma\ stream\ em\ que\ os\ elementos\ s\u00E3o\ do\ tipo\ Double.\r\n\ Esse\ \u00E9\ o\ tipo\ de\ dados\ devolvido\ pelo\ m\u00E9todo\ getDuracao.\r\n\ \r\n
comment21.params=autor
comment21.target=void\ removeFaixas(java.lang.String)
comment22.params=autor
comment22.target=void\ removeFaixasF(java.lang.String)
comment23.params=
comment23.target=java.util.Map\ faixasPorClass()
comment23.text=\r\n\ M\u00E9todo\ que\ devolve\ um\ map\ que\ associa\ a\ cada\ valor\ de\ classifica\u00E7\u00E3o\ a\r\n\ respectiva\ lista\ de\ faixas\r\n\ \r\n
comment24.params=
comment24.target=java.util.Map\ faixasPorClass_F()
comment25.params=
comment25.target=java.util.Set\ faixasPorOrdemTitulo()
comment25.text=\r\n\ M\u00E9todo\ que\ devolve\ as\ faixas\ ordenadas\ por\ ordem\ alfab\u00E9tica\ de\ nome\ da\ faixa.\r\n\ Para\ tal\ usar\u00E1\ o\ ordem\ natural,\ definida\ pela\ implementa\u00E7\u00E3o\ de\ compareTo,\ e\ devolver\u00E1\r\n\ um\ Set<Faixa>\r\n\ \r\n
comment26.params=
comment26.target=java.util.Set\ faixasPorOrdemAutor()
comment26.text=\r\n\ M\u00E9todo\ que\ devolve\ as\ faixas\ ordenadas\ por\ ordem\ alfab\u00E9tica\ de\ nome\ do\ autor.\r\n\ Para\ tal\ usar\u00E1\ o\ ordem\ definida\ pelo\ comparador\ ComparatorFaixaPorAutor,\ e\ devolver\u00E1\r\n\ um\ Set<Faixa>\r\n\ \r\n
comment3.params=
comment3.target=java.util.ArrayList\ getFaixas()
comment3.text=\r\n\ Devolve\ uma\ c\u00F3pia\ da\ lista\ de\ m\u00FAsicas\ da\ playlist.\r\n
comment4.params=faixas
comment4.target=void\ setFaixas(java.util.ArrayList)
comment4.text=\r\n\ Define\ um\ novo\ valor\ para\ a\ lista\ de\ m\u00FAsicas.\r\n
comment5.params=o
comment5.target=boolean\ equals(java.lang.Object)
comment6.params=
comment6.target=java.lang.String\ toString()
comment7.params=
comment7.target=ExemploPlaylist.Playlist\ clone()
comment8.params=
comment8.target=int\ numFaixas()
comment8.text=\r\n\ Contagem\ do\ numero\ de\ faixas\ na\ playlist.\r\n\ \r\n\ Exemplo\ de\ implementa\u00E7\u00E3o\ incorrecta\r\n\ (por\ desconhecimento\ da\ API\!\!)\r\n\r\n\ public\ int\ numFaixasErrado()\ {\r\n\ \ \ \ \ int\ i\ \=\ 0;\r\n\ \ \ \ \ for(Faixa\ f\ \:\ faixas)\ {\r\n\ \ \ \ \ \ \ \ \ i++;\r\n\ \ \ \ \ \ }\r\n\ \ \ \ \ \ return\ i;\r\n\ \ }\r\n\ \r\n
comment9.params=f
comment9.target=void\ addFaixa(Faixa)
comment9.text=\ \r\n\ Adicionar\ uma\ faixa\ \u00E0\ playlist\r\n\ \r\n\ Exemplo\ de\ implementa\u00E7\u00E3o\ incorrecta\r\n\ (por\ desconhecimento\ da\ API,\ uma\ vez\ que\ n\u00E3o\ \u00E9\ assim\ que\ se\ deve\ fazer)\r\n\ public\ void\ addFaixaErrado1(Faixa\ f)\ {\r\n\ \ \ \ \ int\ i\ \=\ 0;\r\n\ \ \ \ \ Iterator<Faixa>\ it\ \=\ faixas.iterator();\r\n\ \ \ \ \ while(it.hasNext())\ {\r\n\ \ \ \ \ \ \ \ \ it.next();\r\n\ \ \ \ \ \ \ \ \ i++;\r\n\ \ \ \ \ \ }\r\n\ \ \ \ \ \ faixas.add(i,f);\ //falta\ clone\!\r\n\ \ }\r\n\ \ \r\n\ \ public\ void\ addFaixaErrado2(Faixa\ m)\ {\r\n\ \ \ \ \ \ int\ i\ \=\ numFaixas();\r\n\ \ \ \ \ \ faixas.add(i,m.clone());\r\n\ \ }\r\n
numComments=27
