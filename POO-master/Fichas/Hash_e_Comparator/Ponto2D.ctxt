#BlueJ class context
comment0.target=Ponto2D
comment1.params=cx\ cy
comment1.target=Ponto2D(double,\ double)
comment10.params=
comment10.target=boolean\ simetrico()
comment10.text=\ determina\ se\ um\ ponto\ \uFFFD\ sim\uFFFDtrico\ (dista\ do\ eixo\ dos\ XX\ o\ \r\nmesmo\ que\ do\ eixo\ dos\ YY
comment11.params=
comment11.target=boolean\ coordPos()
comment11.text=verifica\ se\ ambas\ as\ coordenadas\ s\uFFFDo\ positivas
comment12.params=p
comment12.target=boolean\ igual(Ponto2D)
comment12.text=verifica\ se\ os\ 2\ pontos\ s\uFFFDo\ iguais
comment13.params=p
comment13.target=boolean\ igual1(Ponto2D)
comment14.params=umPonto
comment14.target=boolean\ equals(java.lang.Object)
comment14.text=\ \r\n\ implementa\uFFFD\uFFFDo\ do\ m\uFFFDtodo\ equals\r\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=Converte\ para\ uma\ representa\uFFFD\uFFFDo\ textual
comment16.params=
comment16.target=Ponto2D\ clone()
comment16.text=Cria\ uma\ c\uFFFDpia\ do\ ponto\ receptor\ (receptor\ \=\ this)
comment17.params=
comment17.target=int\ hashCode()
comment17.text=\r\n\ Implementa\uFFFD\uFFFDo\ do\ m\uFFFDtodo\ hashcode.\r\n\ Este\ m\uFFFDtodo\ \uFFFD\ necess\uFFFDrio\ sempre\ que\ for\ necess\uFFFDrio\ criar\ estruturas\ baseadas\ em\ hash.\r\n\ Dessa\ forma\ cada\ uma\ das\ inst\uFFFDncias\ de\ Ponto2D\ ser\uFFFD\ capaz\ de\ calcular\ o\ seu\ valor\ de\ hash.\r\n\ \r\n\ Note-se\ que\ sempre\ que\ sempre\ que\ a\ compara\uFFFD\uFFFDo,\ com\ equals,\ de\ dois\ objectos\ d\uFFFD\ true,\ ent\uFFFDo\ \r\n\ os\ seus\ valores\ de\ hashcode\ devem\ ser\ o\ mesmo.\r\n\ \r\n\ Isto\ \uFFFD,\ se\ \ (o1.equals(o2))\ \=\=\ true,\ ent\uFFFDo\ o1.hashcode()\ \=\=\ o2.hashcode()\r\n\ \r\n\ \r\n
comment18.params=p
comment18.target=int\ compareTo(Ponto2D)
comment18.text=\r\n\ m\uFFFDtodo\ que\ implementa\ a\ ordem\ natural.\r\n
comment2.params=
comment2.target=Ponto2D()
comment3.params=p
comment3.target=Ponto2D(Ponto2D)
comment4.params=
comment4.target=double\ getX()
comment5.params=
comment5.target=double\ getY()
comment6.params=dx\ dy
comment6.target=void\ incCoord(double,\ double)
comment6.text=incremento\ das\ coordenadas
comment7.params=dx\ dy
comment7.target=void\ decCoord(double,\ double)
comment7.text=decremento\ das\ coordenadas
comment8.params=p
comment8.target=void\ somaPonto(Ponto2D)
comment8.text=soma\ as\ coordenadas\ do\ ponto\ par\uFFFDmetro\ ao\ ponto\ receptor
comment9.params=dx\ dy
comment9.target=Ponto2D\ somaPonto(double,\ double)
comment9.text=soma\ os\ valores\ par\uFFFDmetro\ e\ devolve\ um\ novo\ ponto
numComments=19
